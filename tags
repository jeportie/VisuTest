!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUFFER_SIZE	include/libft.h	28;"	d
BUFFER_SIZE	include/printf.h	27;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
ERNOFORMAT	include/printf.h	/^	ERNOFORMAT,$/;"	e	enum:e_error
ERNOMEM	include/printf.h	/^	ERNOMEM,$/;"	e	enum:e_error
ERNOWRITE	include/printf.h	/^	ERNOWRITE,$/;"	e	enum:e_error
ERROR	include/libft.h	31;"	d
ERROR	include/printf.h	30;"	d
LIBFT_H	include/libft.h	14;"	d
NAME	Makefile	/^NAME = libft.a$/;"	m
NOERR	include/printf.h	/^	NOERR,$/;"	e	enum:e_error
OBJ	Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
PRINTF_H	include/printf.h	14;"	d
SRC	Makefile	/^SRC = \\$/;"	m
buf_fd	include/printf.h	/^	int		buf_fd;$/;"	m	struct:s_buffer
buf_last	include/printf.h	/^	char	buf_last;$/;"	m	struct:s_buffer
buffer	include/printf.h	/^	char	*buffer;$/;"	m	struct:s_buffer
e_error	include/printf.h	/^typedef enum e_error$/;"	g
error	include/printf.h	/^	int			error;$/;"	m	struct:s_format_spec
error	include/printf.h	/^	int		error;$/;"	m	struct:s_buffer
flag_hash	include/printf.h	/^	int			flag_hash;$/;"	m	struct:s_format_spec
flag_minus	include/printf.h	/^	int			flag_minus;$/;"	m	struct:s_format_spec
flag_plus	include/printf.h	/^	int			flag_plus;$/;"	m	struct:s_format_spec
flag_space	include/printf.h	/^	int			flag_space;$/;"	m	struct:s_format_spec
flag_zero	include/printf.h	/^	int			flag_zero;$/;"	m	struct:s_format_spec
ft_apply_precision	src/printf/ft_apply_precision.c	/^void	ft_apply_precision(t_format_spec spec, char **formatted_content)$/;"	f
ft_apply_width	src/printf/ft_apply_width.c	/^void	ft_apply_width(t_format_spec spec, t_buffer *buf_info, int content_len)$/;"	f
ft_atoi	src/conversion/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atol	src/conversion/ft_atol.c	/^long	ft_atol(const char *nptr)$/;"	f
ft_buffer_add	src/printf/ft_buffer_add.c	/^void	ft_buffer_add(t_buffer *buf_info, char c)$/;"	f
ft_buffer_flush	src/printf/ft_buffer_flush.c	/^int	ft_buffer_flush(t_buffer *buf_info)$/;"	f
ft_buffer_help	src/printf/ft_buffer_add.c	/^void	ft_buffer_help(t_buffer *buf_info, char c)$/;"	f
ft_bzero	src/memory/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	src/memory/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_check_fd	src/utils/ft_check_fd.c	/^void	ft_check_fd(int fd, const char *error_message)$/;"	f
ft_check_flush	src/printf/ft_printf.c	/^void	ft_check_flush(t_buffer *buf_info)$/;"	f
ft_check_format	src/printf/ft_check_format.c	/^int	ft_check_format(t_format_spec *spec)$/;"	f
ft_check_malloc	src/utils/ft_check_malloc.c	/^void	ft_check_malloc(void *ptr, const char *error_message)$/;"	f
ft_check_pid	src/utils/ft_check_pid.c	/^void	ft_check_pid(int pid)$/;"	f
ft_concat_path	src/utils/ft_find_cmd_path.c	/^static char	*ft_concat_path(char **paths, const char *cmd)$/;"	f	file:
ft_convert_spec	src/printf/ft_printf.c	/^static int	ft_convert_spec(t_format_spec spec, va_list args,$/;"	f	file:
ft_count_words	src/string/ft_split.c	/^size_t	ft_count_words(char *str, char c)$/;"	f
ft_dprintf	src/printf/ft_dprintf.c	/^int	ft_dprintf(int fd, const char *format, ...)$/;"	f
ft_extract	src/string/ft_split.c	/^static char	*ft_extract(const char **s, char c, char **tab, size_t i)$/;"	f	file:
ft_fill_base	src/conversion/ft_ulltoa_base.c	/^static char	*ft_fill_base(unsigned long long nbr, int size, char *base,$/;"	f	file:
ft_fill_base	src/conversion/ft_utoa_base.c	/^static char	*ft_fill_base(unsigned int nbr, int size, char *base, char *res)$/;"	f	file:
ft_find_cmd_path	src/utils/ft_find_cmd_path.c	/^char	*ft_find_cmd_path(char **envp, const char *cmd)$/;"	f
ft_find_end	src/printf/ft_parse_format.c	/^static char	*ft_find_end(const char *start, t_format_spec *spec)$/;"	f	file:
ft_free_memory	src/string/ft_split.c	/^static void	ft_free_memory(char **tab, size_t i)$/;"	f	file:
ft_getenv	src/utils/ft_getenv.c	/^char	*ft_getenv(char **envp, const char *name)$/;"	f
ft_handle_char	src/printf/ft_handle_char.c	/^void	ft_handle_char(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_hash_flag	src/printf/ft_handle_hash_flag.c	/^void	ft_handle_hash_flag(t_format_spec spec, int content, t_buffer *buf_info)$/;"	f
ft_handle_hexadecimal	src/printf/ft_handle_hexadecimal.c	/^int	ft_handle_hexadecimal(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_int	src/printf/ft_handle_int.c	/^int	ft_handle_int(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_plus_flag	src/printf/ft_handle_plus_flag.c	/^void	ft_handle_plus_flag(t_format_spec spec, int content, t_buffer *buf_info)$/;"	f
ft_handle_pointer	src/printf/ft_handle_pointer.c	/^int	ft_handle_pointer(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_space_flag	src/printf/ft_handle_space_flag.c	/^void	ft_handle_space_flag(t_format_spec spec, int content,$/;"	f
ft_handle_string	src/printf/ft_handle_string.c	/^void	ft_handle_string(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_init	src/printf/ft_snprintf.c	/^static t_buffer	ft_init(t_buffer buf_info, size_t size)$/;"	f	file:
ft_intlen	src/conversion/ft_itoa.c	/^static size_t	ft_intlen(long n)$/;"	f	file:
ft_isalnum	src/bool/ft_isalnum.c	/^bool	ft_isalnum(int c)$/;"	f
ft_isalpha	src/bool/ft_isalpha.c	/^bool	ft_isalpha(int c)$/;"	f
ft_isascii	src/bool/ft_isascii.c	/^bool	ft_isascii(int c)$/;"	f
ft_isconvert_spec	src/printf/ft_isconvert_spec.c	/^int	ft_isconvert_spec(char c)$/;"	f
ft_isdigit	src/bool/ft_isdigit.c	/^bool	ft_isdigit(int c)$/;"	f
ft_isflag	src/printf/ft_isflag.c	/^int	ft_isflag(char c)$/;"	f
ft_isprint	src/bool/ft_isprint.c	/^bool	ft_isprint(int c)$/;"	f
ft_issign	src/conversion/ft_atoi.c	/^static int	ft_issign(int c, int *sign)$/;"	f	file:
ft_issign	src/conversion/ft_atol.c	/^static int	ft_issign(int c, int *sign)$/;"	f	file:
ft_isspace	src/bool/ft_isspace.c	/^bool	ft_isspace(int c)$/;"	f
ft_isxdigit	src/bool/ft_isxdigit.c	/^bool	ft_isxdigit(int c)$/;"	f
ft_itoa	src/conversion/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_loop_format	src/printf/ft_snprintf.c	/^static t_buffer	ft_loop_format(const char *format, size_t size, char *str, ...)$/;"	f	file:
ft_memchr	src/memory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	src/memory/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	src/memory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	src/memory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	src/memory/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_nbr_len	src/printf/ft_nbr_len.c	/^int	ft_nbr_len(unsigned long long nbr, int base_len)$/;"	f
ft_new_str	src/printf/ft_apply_precision.c	/^static int	ft_new_str(char **new_str, t_format_spec *spec, int total_len,$/;"	f	file:
ft_parse_flags	src/printf/ft_parse_flags.c	/^void	ft_parse_flags(const char *format, t_format_spec *spec)$/;"	f
ft_parse_format	src/printf/ft_parse_format.c	/^t_format_spec	ft_parse_format(const char **format)$/;"	f
ft_parse_precision	src/printf/ft_parse_flags.c	/^static void	ft_parse_precision(const char *format, t_format_spec *spec,$/;"	f	file:
ft_parse_width	src/printf/ft_parse_flags.c	/^static void	ft_parse_width(const char *format, t_format_spec *spec, size_t *i)$/;"	f	file:
ft_perror	src/printf/ft_perror.c	/^void	ft_perror(t_error error)$/;"	f
ft_prepare_hex_content	src/printf/ft_handle_hexadecimal.c	/^static int	ft_prepare_hex_content(t_format_spec spec, unsigned int content,$/;"	f	file:
ft_prepare_int	src/printf/ft_handle_int.c	/^static int	ft_prepare_int(t_format_spec spec, long long content,$/;"	f	file:
ft_prepare_pointer	src/printf/ft_handle_pointer.c	/^static int	ft_prepare_pointer(char **adresse, t_buffer *buf_info, void *ptr)$/;"	f	file:
ft_printf	src/printf/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_process_format_specifier	src/printf/ft_printf.c	/^int	ft_process_format_specifier(const char **format, va_list args,$/;"	f
ft_process_formatted_hex	src/printf/ft_handle_hexadecimal.c	/^static void	ft_process_formatted_hex(t_format_spec spec, unsigned int content,$/;"	f	file:
ft_process_int	src/printf/ft_handle_int.c	/^static void	ft_process_int(t_format_spec spec, long long content,$/;"	f	file:
ft_process_pointer	src/printf/ft_handle_pointer.c	/^static void	ft_process_pointer(t_format_spec spec, char *adresse,$/;"	f	file:
ft_psh_flags	src/printf/ft_parse_flags.c	/^static void	ft_psh_flags(const char *format, t_format_spec *spec, size_t *i)$/;"	f	file:
ft_putchar_fd	src/io/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	src/io/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	src/io/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	src/io/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc	src/memory/ft_realloc.c	/^void	*ft_realloc(void *ptr, size_t old_size, size_t new_size)$/;"	f
ft_snprintf	src/printf/ft_snprintf.c	/^int	ft_snprintf(char *str, size_t size, const char *format, ...)$/;"	f
ft_split	src/string/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	src/string/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	src/string/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	src/string/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	src/string/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_free	src/string/ft_strjoin.c	/^char	*ft_strjoin_free(char *s1, const char *s2)$/;"	f
ft_strlcat	src/string/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	src/string/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	src/string/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	src/string/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	src/string/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	src/string/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	src/string/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	src/string/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	src/string/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr_len	src/string/ft_split.c	/^static size_t	ft_substr_len(char *str, char c)$/;"	f	file:
ft_tolower	src/conversion/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	src/conversion/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_ulltoa_base	src/conversion/ft_ulltoa_base.c	/^char	*ft_ulltoa_base(unsigned long long nbr, char *base)$/;"	f
ft_utoa_base	src/conversion/ft_utoa_base.c	/^char	*ft_utoa_base(unsigned int nbr, char *base)$/;"	f
ft_zero_minus_flags	src/printf/ft_parse_flags.c	/^static void	ft_zero_minus_flags(const char *format, t_format_spec *spec,$/;"	f	file:
generate_src_list	update_makefile.sh	/^generate_src_list() {$/;"	f
index	include/printf.h	/^	int		index;$/;"	m	struct:s_buffer
max_size	include/printf.h	/^	size_t	max_size;$/;"	m	struct:s_buffer
nb_printed	include/printf.h	/^	int		nb_printed;$/;"	m	struct:s_buffer
precision	include/printf.h	/^	int			precision;$/;"	m	struct:s_format_spec
s_buffer	include/printf.h	/^typedef struct s_buffer$/;"	s
s_format_spec	include/printf.h	/^typedef struct s_format_spec$/;"	s
t_buffer	include/printf.h	/^}			t_buffer;$/;"	t	typeref:struct:s_buffer
t_error	include/printf.h	/^}	t_error;$/;"	t	typeref:enum:e_error
t_format_spec	include/printf.h	/^}				t_format_spec;$/;"	t	typeref:struct:s_format_spec
type	include/printf.h	/^	char		type;$/;"	m	struct:s_format_spec
width	include/printf.h	/^	int			width;$/;"	m	struct:s_format_spec
